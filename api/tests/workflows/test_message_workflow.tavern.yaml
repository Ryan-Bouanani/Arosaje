test_name: Test du workflow complet de messagerie

marks:
  - usefixtures:
      - api_url
      - test_password
      - test_user_email

stages:
  - name: Log - D√©but des tests
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üöÄ D√©marrage des tests de messagerie"
    response:
      status_code: 200

  - name: Log - Cr√©ation des utilisateurs
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üë• √âtape 1: Cr√©ation des utilisateurs (propri√©taire, gardien, botaniste)"
    response:
      status_code: 200

  # 1. Cr√©ation des utilisateurs (propri√©taire, gardien et botaniste)
  - name: Cr√©er compte propri√©taire
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        email: "owner_{test_user_email}"
        password: "{test_password}"
        nom: "Dupont"
        prenom: "Jean"
        telephone: "0123456789"
        localisation: "Paris"
    response:
      status_code: 200
      json:
        id: !anyint
        email: "owner_{test_user_email}"
        nom: "Dupont"
        prenom: "Jean"
        telephone: "0123456789"
        localisation: "Paris"
        role: "user"
      save:
        json:
          owner_id: id

  - name: Log - V√©rification ID propri√©taire
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üîç ID propri√©taire: {owner_id}"
    response:
      status_code: 200

  - name: Cr√©er compte gardien
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        email: "caretaker_{test_user_email}"
        password: "{test_password}"
        nom: "Martin"
        prenom: "Sophie"
        telephone: "0987654321"
        localisation: "Lyon"
    response:
      status_code: 200
      json:
        id: !anyint
        email: "caretaker_{test_user_email}"
        nom: "Martin"
        prenom: "Sophie"
        telephone: "0987654321"
        localisation: "Lyon"
        role: "user"
      save:
        json:
          caretaker_id: id

  - name: Log - V√©rification ID gardien
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üîç ID gardien: {caretaker_id}"
    response:
      status_code: 200

  - name: Cr√©er compte botaniste
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        email: "botanist_{test_user_email}"
        password: "{test_password}"
        nom: "Petit"
        prenom: "Marie"
        telephone: "0634567890"
        localisation: "Bordeaux"
    response:
      status_code: 200
      json:
        id: !anyint
        email: "botanist_{test_user_email}"
        nom: "Petit"
        prenom: "Marie"
        telephone: "0634567890"
        localisation: "Bordeaux"
        role: "user"
      save:
        json:
          botanist_id: id

  - name: Log - V√©rification ID botaniste
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üîç ID botaniste: {botanist_id}"
    response:
      status_code: 200

  - name: Log - Login des utilisateurs
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üîë √âtape 2: Login des utilisateurs"
    response:
      status_code: 200

  # 2. Login des utilisateurs
  - name: Login propri√©taire
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "owner_{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          owner_token: access_token

  - name: Login gardien
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "caretaker_{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          caretaker_token: access_token

  - name: Login botaniste
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "botanist_{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          botanist_token: access_token

  - name: Log - Configuration du r√¥le botaniste
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üë®‚Äçüåæ √âtape 3: Configuration du r√¥le botaniste"
    response:
      status_code: 200

  # 3. D√©finir le r√¥le botaniste
  - name: Mettre √† jour le r√¥le en botaniste
    request:
      url: "{api_url}/auth/users/{botanist_id}/role"
      method: PUT
      headers:
        Authorization: "Bearer {botanist_token}"
      json:
        role: "botanist"
    response:
      status_code: 200

  - name: Log - Cr√©ation de la plante
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üåø √âtape 4: Cr√©ation d'une plante test"
    response:
      status_code: 200

  # 4. Cr√©er une plante pour le test
  - name: Cr√©er une plante
    request:
      url: "{api_url}/plants/"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        nom: "Ficus"
        espece: "Ficus benjamina"
        description: "Belle plante d'int√©rieur"
        owner_id: !int "{owner_id}"
    response:
      status_code: 200
      save:
        json:
          plant_id: id

  - name: Log - Cr√©ation demande de garde
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üìù √âtape 5: Cr√©ation d'une demande de garde"
    response:
      status_code: 200

  # 5. Cr√©er une demande de garde
  - name: Cr√©er une demande de garde
    request:
      url: "{api_url}/plant-care/"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        plant_id: !int "{plant_id}"
        caretaker_id: !int "{caretaker_id}"
        start_date: "2024-03-01T00:00:00"
        end_date: "2024-03-15T00:00:00"
        care_instructions: "Arroser deux fois par semaine"
    response:
      status_code: 200
      save:
        json:
          care_id: id

  - name: Log - Acceptation de la garde
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "‚úÖ √âtape 6: Acceptation de la demande de garde"
    response:
      status_code: 200

  # 6. Accepter la demande de garde (cr√©e automatiquement une conversation PLANT_CARE)
  - name: Accepter la garde
    request:
      url: "{api_url}/plant-care/{care_id}/status"
      method: PUT
      headers:
        Authorization: "Bearer {caretaker_token}"
      params:
        status: "accepted"
    response:
      status_code: 200
      save:
        json:
          conversation_id: conversation_id
      verify_response_with:
        function: validators.care_validators:validate_care_response
        extra_kwargs:
          expected_status: "accepted"
          check_conversation: true

  - name: Log - Tests de messagerie
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üí¨ √âtapes 7-8: V√©rification de la conversation et des messages"
    response:
      status_code: 200

  # 7. V√©rifier la conversation cr√©√©e
  - name: V√©rifier la conversation
    request:
      url: "{api_url}/messages/conversations/{conversation_id}"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.conversation_validators:validate_conversation_response
        extra_kwargs:
          conversation_type: "plant_care"
          expected_participants_count: 2

  # 8. V√©rifier les messages
  - name: V√©rifier les messages
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.message_validators:validate_messages_list_response
        extra_kwargs:
          expected_count: 1
          expected_content: "La demande de garde a √©t√© accept√©e"

  - name: Log - Test limite messages
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üìè √âtape 9: Test de la limite de taille des messages"
    response:
      status_code: 200

  # 9. Test de la limite de taille des messages
  - name: Tester message trop long
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        conversation_id: !int "{conversation_id}"
        content: |
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    response:
      status_code: 422
      json:
        detail:
          - type: "string_too_long"
            loc: ["body", "content"]
            msg: "String should have at most 2000 characters"
            input: !anything
            ctx:
              max_length: 2000

  - name: Log - Test pagination
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üìÑ √âtapes 10: Tests de pagination"
    response:
      status_code: 200

  # 10. Test de la pagination - Cr√©ation de plusieurs messages
  - name: Envoyer message 1
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        conversation_id: !int "{conversation_id}"
        content: "Message de test 1"
    response:
      status_code: 200

  - name: Envoyer message 2
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        conversation_id: !int "{conversation_id}"
        content: "Message de test 2"
    response:
      status_code: 200

  - name: Envoyer message 3
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        conversation_id: !int "{conversation_id}"
        content: "Message de test 3"
    response:
      status_code: 200

  - name: Envoyer message 4
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        conversation_id: !int "{conversation_id}"
        content: "Message de test 4"
    response:
      status_code: 200

  - name: Envoyer message 5
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        conversation_id: !int "{conversation_id}"
        content: "Message de test 5"
    response:
      status_code: 200

  # Test de la pagination
  - name: V√©rifier la pagination - premi√®re page
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
      params:
        skip: 0
        limit: 5
    response:
      status_code: 200
      verify_response_with:
        function: validators.message_validators:validate_messages_list_response
        extra_kwargs:
          expected_count: 5
          all_read: false

  - name: V√©rifier la pagination - deuxi√®me page
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
      params:
        skip: 5
        limit: 5
    response:
      status_code: 200
      verify_response_with:
        function: validators.message_validators:validate_messages_list_response
        extra_kwargs:
          expected_count: 1
          all_read: false

  - name: Log - Test messages non lus
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üì® √âtapes 11-14: Tests des messages non lus"
    response:
      status_code: 200

  # 11. Test des messages non lus
  - name: V√©rifier le compteur initial de messages non lus
    request:
      url: "{api_url}/messages/unread-count"
      method: GET
      headers:
        Authorization: "Bearer {caretaker_token}"
    response:
      status_code: 200
      json:
        - conversation_id: !int "{conversation_id}"
          unread_count: !int "5"

  # 12. Marquer la conversation comme lue
  - name: Marquer la conversation comme lue
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/read"
      method: POST
      headers:
        Authorization: "Bearer {caretaker_token}"
    response:
      status_code: 200
      json:
        status: "success"
      verify_response_with:
        function: validators.message_validators:validate_read_status_response

  # 13. V√©rifier que les messages sont bien marqu√©s comme lus
  - name: V√©rifier le statut de lecture des messages
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: GET
      headers:
        Authorization: "Bearer {caretaker_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.message_validators:validate_messages_list_response
        extra_kwargs:
          all_read: true

  # 14. V√©rifier le compteur de messages non lus apr√®s marquage
  - name: V√©rifier le compteur apr√®s marquage
    request:
      url: "{api_url}/messages/unread-count"
      method: GET
      headers:
        Authorization: "Bearer {caretaker_token}"
    response:
      status_code: 200
      json:
        - conversation_id: !int "0"
          unread_count: !int "0"

  - name: Log - Test conversation botaniste
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üå∫ √âtapes 15-16: Tests de conversation avec le botaniste"
    response:
      status_code: 200

  # V√©rification des IDs
  - name: V√©rifier les IDs avant cr√©ation de la conversation
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üîç V√©rification - owner_id: {owner_id}, botanist_id: {botanist_id}"
    response:
      status_code: 200

  # 15. Cr√©er une conversation avec le botaniste
  - name: Cr√©er une conversation avec le botaniste
    request:
      url: "{api_url}/messages/conversations"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        type: "botanical_advice"
        participant_ids: [!anyint "{owner_id}", !anyint "{botanist_id}"]
    response:
      status_code: 200
      save:
        json:
          botanical_conversation_id: id
      verify_response_with:
        function: validators.conversation_validators:validate_conversation_response
        extra_kwargs:
          conversation_type: "botanical_advice"
          expected_participants_count: 2

  # 16. V√©rifier le type de conversation
  - name: V√©rifier la conversation botanique
    request:
      url: "{api_url}/messages/conversations/{botanical_conversation_id}"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.conversation_validators:validate_conversation_response
        extra_kwargs:
          conversation_type: "botanical_advice"
          expected_participants_count: 2

  # 17. Test des nouvelles fonctionnalit√©s de messagerie
  - name: V√©rifier l'historique pagin√©
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/history"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
      params:
        page: 1
        page_size: 3
    response:
      status_code: 200
      json:
        messages: !anything
        total_messages: !int
        current_page: 1
        total_pages: !int
        page_size: 3
      verify_response_with:
        function: validators.message_validators:validate_paginated_messages_response
        extra_kwargs:
          expected_page_size: 3

  # 18. Test de la liste des participants
  - name: V√©rifier les participants de la conversation
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/participants"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.message_validators:validate_participants_response
        extra_kwargs:
          expected_count: 2
          expected_participants: [!int "{owner_id}", !int "{caretaker_id}"]

  # 19. Test du statut de frappe
  - name: V√©rifier le statut de frappe initial
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/typing"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      json: []

  - name: Log - Test WebSocket
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üîå √âtapes 20-21: Tests WebSocket"
    response:
      status_code: 200

  # 20. Test de la connexion WebSocket
  - name: √âtablir une connexion WebSocket
    request:
      url: "ws://{api_url}/ws/{conversation_id}"
      method: GET
      params:
        token: "{owner_token}"
    response:
      status_code: 101
      verify_response_with:
        function: validators.message_validators:validate_websocket_connection_response

  # 20. Test des √©v√©nements WebSocket
  - name: Envoyer un message via WebSocket
    request:
      url: "ws://{api_url}/ws/{conversation_id}"
      method: WEBSOCKET
      json:
        type: "message"
        content: "Message via WebSocket"
    response:
      verify_response_with:
        function: validators.message_validators:validate_websocket_message_event
      json:
        type: "new_message"
        message:
          content: "Message via WebSocket"
          sender_id: !int "{owner_id}"
          conversation_id: !int "{conversation_id}"
          is_read: false

  - name: Envoyer un statut de frappe via WebSocket
    request:
      url: "ws://{api_url}/ws/{conversation_id}"
      method: WEBSOCKET
      json:
        type: "typing"
        is_typing: true
    response:
      verify_response_with:
        function: validators.message_validators:validate_websocket_typing_event
      json:
        type: "typing_status"
        user_id: !int "{owner_id}"
        conversation_id: !int "{conversation_id}"
        is_typing: true

  - name: Marquer comme lu via WebSocket
    request:
      url: "ws://{api_url}/ws/{conversation_id}"
      method: WEBSOCKET
      json:
        type: "read"
    response:
      verify_response_with:
        function: validators.message_validators:validate_websocket_read_event
      json:
        type: "messages_read"
        user_id: !int "{owner_id}"
        conversation_id: !int "{conversation_id}"

  # 21. Test de d√©connexion WebSocket
  - name: V√©rifier la d√©connexion propre
    request:
      url: "ws://{api_url}/ws/{conversation_id}"
      method: WEBSOCKET
      json:
        type: "disconnect"
    response:
      status_code: 1000  # Code de fermeture normale WebSocket

  - name: Log - Test notifications
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "üìß √âtape 22: Test des notifications par email"
    response:
      status_code: 200

  # 22. Test de la notification par email
  - name: V√©rifier l'envoi d'email apr√®s un nouveau message
    request:
      url: "{api_url}/messages/conversations/{conversation_id}/messages"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        conversation_id: !int "{conversation_id}"
        content: "Message qui devrait d√©clencher un email"
    response:
      status_code: 200
      verify_response_with:
        function: validators.message_validators:validate_message_with_email_notification
        extra_kwargs:
          recipient_email: "caretaker_{test_user_email}"
          sender_name: "Jean Dupont"

  - name: Log - Fin des tests
    request:
      url: "{api_url}/debug/log"
      method: POST
      json:
        message: "‚ú® Tests de messagerie termin√©s avec succ√®s"
    response:
      status_code: 200 