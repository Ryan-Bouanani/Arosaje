"""Unify advice system with new table structure

Revision ID: 91e759d30754
Revises: f744e4ac549b
Create Date: 2025-09-02 00:24:29.256962

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "91e759d30754"
down_revision: Union[str, None] = "f744e4ac549b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("plant_care_advice")
    op.add_column("advices", sa.Column("plant_care_id", sa.Integer(), nullable=False))
    op.add_column("advices", sa.Column("title", sa.String(length=255), nullable=False))
    op.add_column("advices", sa.Column("content", sa.Text(), nullable=False))
    op.add_column(
        "advices",
        sa.Column(
            "priority",
            sa.Enum("NORMAL", "URGENT", "FOLLOW_UP", name="advicepriority"),
            nullable=True,
        ),
    )
    op.add_column(
        "advices",
        sa.Column(
            "validation_status",
            sa.Enum(
                "PENDING",
                "VALIDATED",
                "REJECTED",
                "NEEDS_REVISION",
                name="validationstatus",
            ),
            nullable=True,
        ),
    )
    op.add_column("advices", sa.Column("validator_id", sa.Integer(), nullable=True))
    op.add_column("advices", sa.Column("validation_comment", sa.Text(), nullable=True))
    op.add_column("advices", sa.Column("validated_at", sa.DateTime(), nullable=True))
    op.add_column("advices", sa.Column("version", sa.Integer(), nullable=True))
    op.add_column(
        "advices", sa.Column("is_current_version", sa.Boolean(), nullable=True)
    )
    op.add_column(
        "advices", sa.Column("previous_version_id", sa.Integer(), nullable=True)
    )
    op.add_column("advices", sa.Column("owner_notified", sa.Boolean(), nullable=True))
    op.add_column(
        "advices", sa.Column("botanist_notified", sa.Boolean(), nullable=True)
    )
    op.alter_column(
        "advices", "botanist_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.drop_constraint("advices_plant_id_fkey", "advices", type_="foreignkey")
    op.drop_constraint("advices_botanist_id_fkey", "advices", type_="foreignkey")
    op.create_foreign_key(
        None, "advices", "plant_cares", ["plant_care_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "advices", "users", ["validator_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "advices", "users", ["botanist_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "advices", "advices", ["previous_version_id"], ["id"], ondelete="SET NULL"
    )
    op.drop_column("advices", "status")
    op.drop_column("advices", "plant_id")
    op.drop_column("advices", "texte")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "advices", sa.Column("texte", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.add_column(
        "advices",
        sa.Column("plant_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "advices",
        sa.Column(
            "status",
            postgresql.ENUM("PENDING", "VALIDATED", "REJECTED", name="advicestatus"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "advices", type_="foreignkey")
    op.drop_constraint(None, "advices", type_="foreignkey")
    op.drop_constraint(None, "advices", type_="foreignkey")
    op.drop_constraint(None, "advices", type_="foreignkey")
    op.create_foreign_key(
        "advices_botanist_id_fkey", "advices", "users", ["botanist_id"], ["id"]
    )
    op.create_foreign_key(
        "advices_plant_id_fkey", "advices", "plants", ["plant_id"], ["id"]
    )
    op.alter_column("advices", "botanist_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_column("advices", "botanist_notified")
    op.drop_column("advices", "owner_notified")
    op.drop_column("advices", "previous_version_id")
    op.drop_column("advices", "is_current_version")
    op.drop_column("advices", "version")
    op.drop_column("advices", "validated_at")
    op.drop_column("advices", "validation_comment")
    op.drop_column("advices", "validator_id")
    op.drop_column("advices", "validation_status")
    op.drop_column("advices", "priority")
    op.drop_column("advices", "content")
    op.drop_column("advices", "title")
    op.drop_column("advices", "plant_care_id")
    op.create_table(
        "plant_care_advice",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("plant_care_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("botanist_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "priority",
            postgresql.ENUM("NORMAL", "URGENT", "FOLLOW_UP", name="advicepriority"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "validation_status",
            postgresql.ENUM(
                "PENDING",
                "VALIDATED",
                "REJECTED",
                "NEEDS_REVISION",
                name="validationstatus",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("validator_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("validation_comment", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "validated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("version", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "is_current_version", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "previous_version_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("owner_notified", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "botanist_notified", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["botanist_id"],
            ["users.id"],
            name="plant_care_advice_botanist_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["plant_care_id"],
            ["plant_cares.id"],
            name="plant_care_advice_plant_care_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["previous_version_id"],
            ["plant_care_advice.id"],
            name="plant_care_advice_previous_version_id_fkey",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["validator_id"],
            ["users.id"],
            name="plant_care_advice_validator_id_fkey",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="plant_care_advice_pkey"),
    )
    # ### end Alembic commands ###
