#!/bin/bash

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables pour suivre l'√©tat des actions
REDIS_DIR_STATUS="‚ùå"
REDIS_ACL_STATUS="‚ùå"
ENV_DIR_STATUS="‚ùå"
ENV_API_STATUS="‚ùå"
ENV_WEB_STATUS="‚ùå"
ENV_MOBILE_STATUS="‚ùå"
GITIGNORE_STATUS="‚ùå"

# Fonction pour g√©n√©rer un mot de passe al√©atoire
generate_password() {
    length=${1:-32}
    tr -dc 'A-Za-z0-9' </dev/urandom | head -c $length
}

# G√©n√©ration des mots de passe
JWT_SECRET=$(generate_password 64)
REDIS_PASSWORD=$(generate_password 32)

# Fonction pour les logs
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Configuration de Redis
log_info "Configuration de Redis..."

# Cr√©ation du dossier redis s'il n'existe pas
if [ ! -d "redis" ]; then
    log_info "Cr√©ation du dossier redis..."
    if mkdir -p redis; then
        REDIS_DIR_STATUS="‚úÖ"
        log_success "Dossier redis cr√©√©"
    else
        log_warning "Erreur lors de la cr√©ation du dossier redis"
        exit 1
    fi
else
    REDIS_DIR_STATUS="‚úÖ"
    log_success "Dossier redis existe d√©j√†"
fi

# Cr√©ation/Mise √† jour du fichier ACL Redis
log_info "Configuration des utilisateurs Redis..."
if cat > redis/users.acl << EOL
user default off
user arosaje on >$REDIS_PASSWORD allcommands allkeys
EOL
then
    REDIS_ACL_STATUS="‚úÖ"
    log_success "Fichier users.acl cr√©√©/mis √† jour avec succ√®s"
else
    log_warning "Erreur lors de la cr√©ation/mise √† jour du fichier users.acl"
    exit 1
fi

# Cr√©ation du dossier env s'il n'existe pas
log_info "Cr√©ation du dossier env..."
if mkdir -p env; then
    ENV_DIR_STATUS="‚úÖ"
    log_success "Dossier env cr√©√©"
else
    log_warning "Erreur lors de la cr√©ation du dossier env"
fi

# Chargement des secrets SMTP
if [ -f "secrets/smtp.env" ]; then
    set -a  # Marque automatiquement les variables comme export√©es
    source secrets/smtp.env
    set +a
    log_success "Secrets SMTP charg√©s avec succ√®s"
else
    log_warning "Le fichier secrets/smtp.env n'existe pas. Ex√©cutez bin/setup-secrets d'abord"
    exit 1
fi

# V√©rification des variables SMTP
if [ -z "$MAIL_USERNAME" ] || [ -z "$MAIL_PASSWORD" ]; then
    log_warning "Les variables SMTP ne sont pas correctement d√©finies dans secrets/smtp.env"
    exit 1
fi

# Configuration de l'API
log_info "Configuration de l'API..."
if cat > env/.env.api << EOL
# Configuration de l'API
PORT=8000
HOST=0.0.0.0
CORS_ORIGINS=http://localhost:3000,http://web:3000

# Configuration de la base de donn√©es
DATABASE_URL=sqlite:///assets/database/arosaje.db

# Configuration JWT
SECRET_KEY=${JWT_SECRET}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Configuration Redis
REDIS_HOST=api-redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_USERNAME=arosaje
REDIS_PASSWORD=${REDIS_PASSWORD}

# Configuration Email
MAIL_USERNAME="${MAIL_USERNAME}"
MAIL_PASSWORD="${MAIL_PASSWORD}"
MAIL_FROM="${MAIL_USERNAME}"
MAIL_PORT=587
MAIL_SERVER=smtp.gmail.com
MAIL_FROM_NAME="A'rosa-je"

# Configuration du serveur
DEBUG=True
EOL
then
    ENV_API_STATUS="‚úÖ"
    log_success "Fichier .env.api cr√©√© avec des mots de passe s√©curis√©s"
else
    log_warning "Erreur lors de la cr√©ation du fichier .env.api"
fi

# Configuration du frontend web
log_info "Configuration du frontend web..."
if cat > env/.env.web << EOL
# Configuration du frontend web
NUXT_PUBLIC_API_URL=http://localhost:8000
PORT=3000
HOST=0.0.0.0
EOL
then
    ENV_WEB_STATUS="‚úÖ"
    log_success "Fichier .env.web cr√©√©"
else
    log_warning "Erreur lors de la cr√©ation du fichier .env.web"
fi

# Configuration du mobile
log_info "Configuration du mobile..."
if cat > env/.env.mobile << EOL
# Configuration de l'application mobile Flutter
PORT=5000
HOST=0.0.0.0
FLUTTER_API_URL=http://10.0.2.2:8000
FLUTTER_APP_NAME=Arosa-je Mobile
FLUTTER_DEBUG=true
EOL
then
    ENV_MOBILE_STATUS="‚úÖ"
    log_success "Fichier .env.mobile cr√©√©"
else
    log_warning "Erreur lors de la cr√©ation du fichier .env.mobile"
fi

# Ajout des fichiers .env au .gitignore s'ils n'y sont pas d√©j√†
log_info "Mise √† jour du .gitignore..."
if [ -f ".gitignore" ]; then
    if ! grep -q "^env/\\.env\\." .gitignore; then
        if echo -e "\n# Variables d'environnement\nenv/.env.*" >> .gitignore; then
            GITIGNORE_STATUS="‚úÖ"
            log_success "Fichiers .env ajout√©s au .gitignore"
        else
            log_warning "Erreur lors de la mise √† jour du .gitignore"
        fi
    else
        GITIGNORE_STATUS="‚úÖ"
        log_info "Les fichiers .env sont d√©j√† dans le .gitignore"
    fi
else
    if echo -e "# Variables d'environnement\nenv/.env.*" > .gitignore; then
        GITIGNORE_STATUS="‚úÖ"
        log_success "Nouveau fichier .gitignore cr√©√© avec les fichiers .env"
    else
        log_warning "Erreur lors de la cr√©ation du .gitignore"
    fi
fi

log_success "Configuration de l'environnement termin√©e!"
echo -e "\nüìã R√©sum√© des actions effectu√©es :"
echo "----------------------------------------"
echo "${ENV_DIR_STATUS} Dossier env"
echo "${ENV_API_STATUS} Fichier .env.api"
echo "${ENV_WEB_STATUS} Fichier .env.web"
echo "${ENV_MOBILE_STATUS} Fichier .env.mobile"
echo "${GITIGNORE_STATUS} Configuration du .gitignore"
echo "----------------------------------------"

# V√©rifier si toutes les actions ont r√©ussi
if [ "$ENV_DIR_STATUS" = "‚úÖ" ] && [ "$ENV_API_STATUS" = "‚úÖ" ] && [ "$ENV_WEB_STATUS" = "‚úÖ" ] && [ "$ENV_MOBILE_STATUS" = "‚úÖ" ] && [ "$GITIGNORE_STATUS" = "‚úÖ" ]; then
    echo "üöÄ Tout est configur√© ! Vous pouvez maintenant lancer les services avec bin/up all"
else
    echo "‚ö†Ô∏è  Certaines actions ont √©chou√©, v√©rifiez les erreurs ci-dessus"
fi

# Cr√©ation des dossiers n√©cessaires
mkdir -p env
mkdir -p mobile/assets

# Cr√©ation du fichier .env.api s'il n'existe pas
if [ ! -f env/.env.api ]; then
    cat > env/.env.api << EOL
# Configuration de l'API
PORT=8000
HOST=0.0.0.0
CORS_ORIGINS=http://localhost:3000,http://web:3000

# Configuration de la base de donn√©es
DATABASE_URL=sqlite:///assets/database/arosaje.db

# Configuration JWT
SECRET_KEY=DXhsDq9QL8eqYhONmoxhKbeV9aTIayouoaTFLLuOydMxaY5pc08estOkcJAoaavA
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Configuration Redis
REDIS_HOST=api-redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_USERNAME=arosaje
REDIS_PASSWORD=ghcqL1jKf1I7NlbZnXxtgbc2ManN6a2N

# Configuration Email
MAIL_USERNAME="arosaje61@gmail.com"
MAIL_PASSWORD="zmun vera jbmr kdfy"
MAIL_FROM="arosaje61@gmail.com"
MAIL_PORT=587
MAIL_SERVER=smtp.gmail.com
MAIL_FROM_NAME="A'rosa-je"

# Configuration du serveur
DEBUG=True
EOL
    echo "Fichier .env.api cr√©√© avec succ√®s"
else
    echo "Le fichier .env.api existe d√©j√†"
fi

# Cr√©ation du fichier .env.mobile s'il n'existe pas
if [ ! -f env/.env.mobile ]; then
    cat > env/.env.mobile << EOL
# Configuration de l'application mobile Flutter
PORT=5000
HOST=0.0.0.0
FLUTTER_API_URL=http://10.0.2.2:8000
FLUTTER_APP_NAME=Arosa-je Mobile
FLUTTER_DEBUG=true
EOL
    echo "Fichier .env.mobile cr√©√© avec succ√®s"
else
    echo "Le fichier .env.mobile existe d√©j√†"
fi

# Copie du fichier .env.mobile dans le dossier assets de l'application mobile
cp env/.env.mobile mobile/assets/.env.mobile
echo "Fichier .env.mobile copi√© dans mobile/assets/"

# Donner les permissions d'ex√©cution aux scripts
chmod +x bin/*

echo "Configuration termin√©e avec succ√®s !" 
