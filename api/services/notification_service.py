from typing import Optional
from sqlalchemy.orm import Session
from models.user import User
from models.plant_care import PlantCare
from models.advice import Advice, AdvicePriority, ValidationStatus
from services.email.email_service import EmailService
import asyncio

class NotificationService:
    def __init__(self):
        self.email_service = EmailService()
    
    async def send_advice_notification(
        self,
        db: Session,
        plant_care_id: int,
        botanist_name: str,
        advice_title: str,
        priority: AdvicePriority
    ):
        """Envoyer une notification au propri√©taire quand un conseil est donn√©"""
        
        # R√©cup√©rer la garde et le propri√©taire
        plant_care = db.query(PlantCare).filter(PlantCare.id == plant_care_id).first()
        if not plant_care:
            return
        
        owner = db.query(User).filter(User.id == plant_care.owner_id).first()
        if not owner:
            return
        
        # D√©terminer le niveau d'urgence du message
        priority_text = {
            AdvicePriority.URGENT: "üö® URGENT",
            AdvicePriority.FOLLOW_UP: "üìã Suivi n√©cessaire",
            AdvicePriority.NORMAL: "üí° Nouveau conseil"
        }.get(priority, "üí° Nouveau conseil")
        
        subject = f"{priority_text} - Conseil botanique pour votre plante"
        
        # Construire le message email
        email_content = f"""
        <h2>üì± A'rosa-je - Nouveau conseil botanique</h2>
        
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
            <h3 style="color: #28a745; margin-top: 0;">
                {priority_text} {advice_title}
            </h3>
            
            <p><strong>Botaniste :</strong> {botanist_name}</p>
            <p><strong>Plante concern√©e :</strong> {plant_care.plant.nom if plant_care.plant else 'Votre plante'}</p>
            <p><strong>P√©riode de garde :</strong> {plant_care.start_date.strftime('%d/%m/%Y')} - {plant_care.end_date.strftime('%d/%m/%Y')}</p>
        </div>
        
        <p>Un botaniste expert a examin√© votre demande et vous a fourni des conseils personnalis√©s pour l'entretien de votre plante.</p>
        
        <div style="text-align: center; margin: 25px 0;">
            <a href="#" style="background-color: #28a745; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                üì± Voir les conseils dans l'app
            </a>
        </div>
        
        <hr style="margin: 25px 0; border: none; border-top: 1px solid #dee2e6;">
        
        <p style="color: #6c757d; font-size: 0.9em;">
            <em>üí° Conseil :</em> Les conseils {priority.value} n√©cessitent votre attention rapide pour assurer la bonne sant√© de votre plante.
        </p>
        
        <p style="color: #6c757d; font-size: 0.8em;">
            Vous recevez ce message car vous avez une garde de plante active sur A'rosa-je.
            <br>Si vous ne souhaitez plus recevoir ces notifications, vous pouvez les d√©sactiver dans les param√®tres de l'application.
        </p>
        """
        
        try:
            await self.email_service.send_email(
                to_email=owner.email,
                subject=subject,
                html_content=email_content
            )
            
            # Marquer comme notifi√© dans la base
            advice = db.query(Advice).filter(
                Advice.plant_care_id == plant_care_id,
                Advice.is_current_version == True
            ).first()
            if advice:
                advice.owner_notified = True
                db.commit()
                
        except Exception as e:
            print(f"Erreur notification propri√©taire: {e}")
    
    async def send_advice_update_notification(
        self,
        db: Session,
        advice_id: int,
        botanist_name: str
    ):
        """Notifier le propri√©taire qu'un conseil a √©t√© mis √† jour"""
        
        advice = db.query(Advice).filter(Advice.id == advice_id).first()
        if not advice:
            return
        
        plant_care = db.query(PlantCare).filter(PlantCare.id == advice.plant_care_id).first()
        if not plant_care:
            return
        
        owner = db.query(User).filter(User.id == plant_care.owner_id).first()
        if not owner:
            return
        
        subject = f"üìù Mise √† jour - Conseil botanique pour votre plante"
        
        email_content = f"""
        <h2>üì± A'rosa-je - Conseil mis √† jour</h2>
        
        <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin: 15px 0;">
            <h3 style="color: #1976d2; margin-top: 0;">
                üìù {advice.title}
            </h3>
            
            <p><strong>Botaniste :</strong> {botanist_name}</p>
            <p><strong>Version :</strong> {advice.version}</p>
            <p><strong>Plante :</strong> {plant_care.plant.nom if plant_care.plant else 'Votre plante'}</p>
        </div>
        
        <p>Le botaniste a mis √† jour ses conseils avec de nouvelles informations importantes pour votre plante.</p>
        
        <div style="text-align: center; margin: 25px 0;">
            <a href="#" style="background-color: #1976d2; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                üì± Voir la mise √† jour
            </a>
        </div>
        """
        
        try:
            await self.email_service.send_email(
                to_email=owner.email,
                subject=subject,
                html_content=email_content
            )
        except Exception as e:
            print(f"Erreur notification mise √† jour: {e}")
    
    async def send_validation_notification(
        self,
        db: Session,
        advice_id: int,
        validator_name: str,
        validation_status: ValidationStatus
    ):
        """Notifier le botaniste auteur qu'un coll√®gue a valid√© son conseil"""
        
        advice = db.query(Advice).filter(Advice.id == advice_id).first()
        if not advice:
            return
        
        author = db.query(User).filter(User.id == advice.botanist_id).first()
        if not author:
            return
        
        # Message selon le statut de validation
        status_messages = {
            ValidationStatus.VALIDATED: {
                "emoji": "‚úÖ",
                "title": "Conseil valid√©",
                "color": "#28a745",
                "message": "F√©licitations ! Un coll√®gue botaniste a valid√© votre conseil."
            },
            ValidationStatus.REJECTED: {
                "emoji": "‚ùå", 
                "title": "Conseil rejet√©",
                "color": "#dc3545",
                "message": "Un coll√®gue botaniste a des r√©serves sur votre conseil."
            },
            ValidationStatus.NEEDS_REVISION: {
                "emoji": "‚ö†Ô∏è",
                "title": "R√©vision n√©cessaire",
                "color": "#ffc107",
                "message": "Un coll√®gue botaniste sugg√®re des am√©liorations √† votre conseil."
            }
        }
        
        status_info = status_messages.get(validation_status, status_messages[ValidationStatus.VALIDATED])
        
        subject = f"{status_info['emoji']} {status_info['title']} - A'rosa-je"
        
        email_content = f"""
        <h2>üì± A'rosa-je - Validation par les pairs</h2>
        
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid {status_info['color']};">
            <h3 style="color: {status_info['color']}; margin-top: 0;">
                {status_info['emoji']} {status_info['title']}
            </h3>
            
            <p><strong>Votre conseil :</strong> {advice.title}</p>
            <p><strong>Valid√© par :</strong> {validator_name}</p>
            <p><strong>Statut :</strong> {validation_status.value}</p>
        </div>
        
        <p>{status_info['message']}</p>
        
        {f'<div style="background-color: #fff3cd; padding: 10px; border-radius: 5px; margin: 15px 0;"><strong>Commentaire :</strong> {advice.validation_comment}</div>' if advice.validation_comment else ''}
        
        <div style="text-align: center; margin: 25px 0;">
            <a href="#" style="background-color: {status_info['color']}; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                üì± Voir les d√©tails
            </a>
        </div>
        
        <p style="color: #6c757d; font-size: 0.9em;">
            La validation par les pairs am√©liore la qualit√© des conseils botaniques sur A'rosa-je.
        </p>
        """
        
        try:
            await self.email_service.send_email(
                to_email=author.email,
                subject=subject,
                html_content=email_content
            )
            
            # Marquer comme notifi√©
            advice.botanist_notified = True
            db.commit()
            
        except Exception as e:
            print(f"Erreur notification validation: {e}")
    
    async def send_urgent_advice_alert(
        self,
        db: Session,
        plant_care_id: int,
        botanist_name: str
    ):
        """Envoyer une alerte imm√©diate pour un conseil urgent"""
        
        # Cette fonction peut √™tre √©tendue pour envoyer des notifications push
        # via Firebase, SMS, ou autres services
        
        plant_care = db.query(PlantCare).filter(PlantCare.id == plant_care_id).first()
        if not plant_care:
            return
        
        owner = db.query(User).filter(User.id == plant_care.owner_id).first()
        if not owner:
            return
        
        subject = f"üö® ALERTE URGENTE - Votre plante a besoin d'attention imm√©diate"
        
        email_content = f"""
        <div style="background-color: #721c24; color: white; padding: 20px; text-align: center; border-radius: 8px;">
            <h1 style="margin: 0; color: white;">üö® ALERTE URGENTE üö®</h1>
            <h2 style="margin: 10px 0; color: white;">Votre plante n√©cessite une attention IMM√âDIATE</h2>
        </div>
        
        <div style="background-color: #f8d7da; padding: 15px; border-radius: 8px; margin: 15px 0; border: 1px solid #f5c6cb;">
            <p><strong>Botaniste expert :</strong> {botanist_name}</p>
            <p><strong>Plante concern√©e :</strong> {plant_care.plant.nom if plant_care.plant else 'Votre plante'}</p>
            <p><strong>Action requise :</strong> IMM√âDIATE</p>
        </div>
        
        <p style="font-size: 1.1em; font-weight: bold; color: #721c24;">
            Un botaniste a identifi√© un probl√®me urgent n√©cessitant votre intervention rapide pour sauver votre plante.
        </p>
        
        <div style="text-align: center; margin: 25px 0;">
            <a href="#" style="background-color: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; font-size: 1.1em;">
                üö® VOIR L'ALERTE MAINTENANT
            </a>
        </div>
        
        <p style="color: #721c24; font-weight: bold;">
            ‚è∞ Temps de r√©action recommand√© : IMM√âDIAT
        </p>
        """
        
        try:
            await self.email_service.send_email(
                to_email=owner.email,
                subject=subject,
                html_content=email_content,
                priority=True  # Email haute priorit√©
            )
        except Exception as e:
            print(f"Erreur alerte urgente: {e}")