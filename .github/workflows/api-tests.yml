name: API Tests

on:
  pull_request:
    paths:
      - 'api/**'
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # Service Redis pour les tests
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Configure hosts file
        run: |
          # Ajouter une entrée dans /etc/hosts pour api-redis
          echo "127.0.0.1 api-redis" | sudo tee -a /etc/hosts
          # Vérifier que l'entrée a été ajoutée
          cat /etc/hosts
          # Vérifier que api-redis résout vers localhost
          ping -c 1 api-redis
          
      - name: Install Redis CLI
        run: |
          # Installer redis-cli
          sudo apt-get update
          sudo apt-get install -y redis-tools
          redis-cli --version
          # Tester la connexion à Redis avec le nom d'hôte api-redis
          redis-cli -h api-redis ping
          
      - name: Install dependencies
        working-directory: ./api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Create required directories
        working-directory: ./api
        run: |
          mkdir -p assets/persisted_img
          mkdir -p assets/temp_img
          mkdir -p assets/img
          mkdir -p assets/database
          mkdir -p logs
          # S'assurer que les permissions sont correctes
          chmod -R 777 assets
          chmod -R 777 logs
          
          # Créer un dossier pour les résultats des tests
          mkdir -p test_results
      
      - name: Préparer la base de données SQLite
        working-directory: ./api
        run: |
          # Créer un fichier vide pour la base de données SQLite
          touch assets/database/test.db
          chmod 666 assets/database/test.db
          
          # Vérifier que le fichier est accessible
          ls -la assets/database/
      
      - name: Vérifier la connexion Redis
        run: |
          # Vérifier que Redis est accessible via api-redis
          redis-cli -h api-redis ping
      
      - name: Create test environment file
        working-directory: ./api
        run: |
          # Créer le fichier d'environnement pour les tests
          cat > .env.test << EOL
          DATABASE_URL=sqlite:///assets/database/test.db
          REDIS_URL=redis://api-redis:6379
          REDIS_PASSWORD=
          ENVIRONMENT=test
          JWT_SECRET=test_secret_key_for_github_actions
          MAIL_USERNAME=test@example.com
          MAIL_PASSWORD=test_password
          MAIL_FROM=test@example.com
          MAIL_PORT=587
          MAIL_SERVER=smtp.example.com
          MAIL_FROM_NAME=Test API
          MAIL_STARTTLS=false
          MAIL_SSL_TLS=false
          USE_CREDENTIALS=false
          DISABLE_EMAIL=true
          # Variables pour les tests qui utilisent un compte admin
          ADMIN_EMAIL=admin@example.com
          ADMIN_PASSWORD=admin123secure
          LOG_LEVEL=DEBUG
          LOG_FILE=logs/api.log
          TAVERN_SKIP_PLANT_CARE=true
          EOL
          
          cat .env.test
          
          # Tester la connexion SQLite
          cat > test_sqlite.py << EOL
          from sqlalchemy import create_engine, text
          import os
          
          db_url = "sqlite:///assets/database/test.db"
          print(f"Test de connexion à {db_url}")
          
          engine = create_engine(db_url)
          with engine.connect() as conn:
              conn.execute(text("CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY)"))
              conn.execute(text("INSERT INTO test VALUES (1)"))
              result = conn.execute(text("SELECT * FROM test")).fetchall()
              print(f"Résultat du test: {result}")
          EOL
          
          python test_sqlite.py
          
          # Tester la connexion Redis
          cat > test_redis.py << EOL
          import redis
          
          r = redis.Redis(host='api-redis', port=6379, db=0)
          print("Test de connexion à Redis via api-redis...")
          
          # Tester set/get
          r.set('test_key', 'test_value')
          result = r.get('test_key')
          print(f"Résultat du test Redis: {result}")
          EOL
          
          python test_redis.py

      - name: Créer un compte admin pour les tests
        working-directory: ./api
        run: |
          # Script pour créer un compte admin
          cat > create_admin.py << EOL
          import os
          import sys
          from sqlalchemy import create_engine, text
          
          # Configurer la base de données
          db_url = "sqlite:///assets/database/test.db"
          engine = create_engine(db_url)
          
          # Créer la table utilisateurs si elle n'existe pas
          with engine.connect() as conn:
              conn.execute(text("""
                  CREATE TABLE IF NOT EXISTS users (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      nom TEXT NOT NULL,
                      prenom TEXT NOT NULL,
                      email TEXT UNIQUE NOT NULL,
                      password_hash TEXT NOT NULL,
                      telephone TEXT,
                      localisation TEXT,
                      verified INTEGER DEFAULT 0,
                      role TEXT DEFAULT 'user'
                  )
              """))
              
              # Vérifier si l'admin existe déjà
              result = conn.execute(text("SELECT id FROM users WHERE email = 'admin@example.com'")).fetchone()
              
              if not result:
                  # Insérer l'admin
                  conn.execute(text("""
                      INSERT INTO users (nom, prenom, email, password_hash, telephone, localisation, verified, role)
                      VALUES ('Admin', 'User', 'admin@example.com', 
                             '$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW', 
                             '0123456789', 'Admin Location', 1, 'admin')
                  """))
                  print("Compte admin créé avec succès")
              else:
                  print("Le compte admin existe déjà")
          EOL
          
          python create_admin.py
          
      # Commenté pour le moment : Préparation des données plant_care
      # - name: Préparer les données pour le test de garde de plante
      #   working-directory: ./api
      #   run: |
      #     # Script pour initialiser les données nécessaires pour le test plant_care_workflow
      #     cat > init_plant_care_data.py << EOL
      #     import os
      #     import sys
      #     from sqlalchemy import create_engine, text
      #     from datetime import datetime, timedelta
      #     
      #     # Configurer la base de données
      #     db_url = "sqlite:///assets/database/test.db"
      #     engine = create_engine(db_url)
      #     
      #     print("Initialisation des données pour le test plant_care_workflow...")
      #     
      #     with engine.connect() as conn:
      #         # Créer la table plantes si elle n'existe pas
      #         conn.execute(text("""
      #             CREATE TABLE IF NOT EXISTS plants (
      #                 id INTEGER PRIMARY KEY AUTOINCREMENT,
      #                 nom TEXT NOT NULL,
      #                 espece TEXT,
      #                 description TEXT,
      #                 user_id INTEGER NOT NULL,
      #                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      #             )
      #         """))
      #         
      #         # Créer la table plant_care si elle n'existe pas
      #         conn.execute(text("""
      #             CREATE TABLE IF NOT EXISTS plant_care (
      #                 id INTEGER PRIMARY KEY AUTOINCREMENT,
      #                 plant_id INTEGER NOT NULL,
      #                 owner_id INTEGER NOT NULL,
      #                 caretaker_id INTEGER,
      #                 start_date TIMESTAMP NOT NULL,
      #                 end_date TIMESTAMP NOT NULL,
      #                 status TEXT DEFAULT 'pending',
      #                 notes TEXT,
      #                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      #             )
      #         """))
      #         
      #         # Insérer des utilisateurs pour le test
      #         conn.execute(text("""
      #             INSERT OR IGNORE INTO users (id, nom, prenom, email, password_hash, telephone, localisation, verified, role)
      #             VALUES 
      #             (2, 'Propriétaire', 'Test', 'owner@example.com', '$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW', 
      #             '0123456789', 'Paris', 1, 'user'),
      #             (3, 'Gardien', 'Test', 'caretaker@example.com', '$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW', 
      #             '0123456789', 'Lyon', 1, 'user')
      #         """))
      #         
      #         # Insérer une plante pour le test
      #         conn.execute(text("""
      #             INSERT OR IGNORE INTO plants (id, nom, espece, description, user_id)
      #             VALUES (1, 'Plante Test', 'Espèce Test', 'Description Test', 2)
      #         """))
      #         
      #         # Insérer une demande de garde
      #         start_date = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
      #         end_date = (datetime.now() + timedelta(days=10)).strftime('%Y-%m-%d')
      #         
      #         # Supprimer les anciennes demandes s'il y en a
      #         conn.execute(text("DELETE FROM plant_care WHERE id = 1"))
      #         
      #         # Créer une nouvelle demande
      #         conn.execute(text(f"""
      #             INSERT INTO plant_care (id, plant_id, owner_id, caretaker_id, start_date, end_date, status, notes)
      #             VALUES (1, 1, 2, 3, '{start_date}', '{end_date}', 'pending', 'Notes de test')
      #         """))
      #         
      #         print("Données initialisées avec succès!")
      #         
      #         # Vérifier que les données ont été correctement insérées
      #         result = conn.execute(text("SELECT * FROM plant_care WHERE id = 1")).fetchone()
      #         print(f"Données de garde insérées: {result}")
      #     EOL
      #     
      #     python init_plant_care_data.py

      - name: Start API server
        working-directory: ./api
        run: |
          # Définir explicitement les variables d'environnement
          export DATABASE_URL="sqlite:///assets/database/test.db"
          export REDIS_URL="redis://api-redis:6379"
          export ADMIN_EMAIL="admin@example.com"
          export ADMIN_PASSWORD="admin123secure"
          export LOG_LEVEL=DEBUG
          export LOG_FILE=logs/api.log
          export TAVERN_SKIP_PLANT_CARE=true
          
          # Démarrer l'API en mode test avec la base SQLite
          # Rediriger stdout et stderr vers un fichier de log spécifique
          nohup python -m uvicorn main:app --host 0.0.0.0 --port 8000 --env-file .env.test > logs/uvicorn.log 2>&1 &
          echo $! > api_pid.txt
          
          # Attente active pour que le serveur soit prêt
          echo "Attente du démarrage de l'API..."
          max_retries=30
          retries=0
          until $(curl --output /dev/null --silent --fail http://localhost:8000/health); do
            if [ $retries -eq $max_retries ]; then
              echo "L'API n'a pas démarré après $max_retries tentatives"
              cat logs/uvicorn.log
              if [ -f logs/api.log ]; then
                cat logs/api.log
              fi
              exit 1
            fi
            printf '.'
            retries=$((retries+1))
            sleep 2
          done
          echo "API démarrée avec succès!"
          curl -v http://localhost:8000/health
      
      - name: Run tests
        working-directory: ./api
        run: |
          # Vérifier à nouveau la disponibilité de l'API avant de lancer les tests
          curl -v http://localhost:8000/health
          
          # Vérifier que Redis est accessible via api-redis
          redis-cli -h api-redis ping
          
          # Exécuter les tests avec SQLite et Redis
          export DATABASE_URL="sqlite:///assets/database/test.db"
          export REDIS_URL="redis://api-redis:6379"
          export ADMIN_EMAIL="admin@example.com"
          export ADMIN_PASSWORD="admin123secure"
          export TAVERN_SKIP_PLANT_CARE=true
          
          # Exécuter les tests un par un et capturer les résultats
          echo "0" > test_results/auth_result.txt
          python -m pytest tests/workflows/test_auth_workflow.tavern.yaml -v
          if [ $? -eq 0 ]; then
            echo "1" > test_results/auth_result.txt
          fi
          
          echo "0" > test_results/advice_result.txt
          python -m pytest tests/workflows/test_advice_workflow.tavern.yaml -v
          if [ $? -eq 0 ]; then
            echo "1" > test_results/advice_result.txt
          fi
          
          echo "0" > test_results/photo_result.txt
          python -m pytest tests/workflows/test_photo_workflow.tavern.yaml -v
          if [ $? -eq 0 ]; then
            echo "1" > test_results/photo_result.txt
          fi
          
          echo "0" > test_results/redis_result.txt
          python -m pytest tests/workflows/test_redis_workflow.tavern.yaml -v
          if [ $? -eq 0 ]; then
            echo "1" > test_results/redis_result.txt
          fi
          
          # Test plant_care commenté pour le moment
          # echo "0" > test_results/plant_care_result.txt
          # python -m pytest tests/workflows/test_plant_care_workflow.tavern.yaml -v
          # if [ $? -eq 0 ]; then
          #   echo "1" > test_results/plant_care_result.txt
          # else
          #   echo "Le test plant_care_workflow a échoué, mais nous continuons l'exécution."
          # fi
      
      - name: API logs en cas d'échec
        if: ${{ failure() }}
        working-directory: ./api
        run: |
          echo "=== Logs de l'API (Uvicorn) ==="
          if [ -f logs/uvicorn.log ]; then
            cat logs/uvicorn.log
          else
            echo "Fichier logs/uvicorn.log introuvable"
          fi
          
          echo "=== Logs de l'API (Application) ==="
          if [ -f logs/api.log ]; then
            cat logs/api.log
          else
            echo "Fichier logs/api.log introuvable"
            ls -la logs/
          fi
          
          echo "=== Contenu du répertoire logs ==="
          ls -la logs/
          
          echo "=== Contenu du répertoire de la base de données ==="
          ls -la assets/database/
          
          echo "=== Configuration de la base de données ==="
          grep -r "DATABASE_URL\|engine\|create_engine\|sqlite" --include="*.py" .
          
          echo "=== Test Redis ==="
          redis-cli -h api-redis ping
          redis-cli -h api-redis keys '*'
          
      - name: Rapport de tests
        if: ${{ always() }}
        working-directory: ./api
        run: |
          echo "=== Rapport de tests ==="
          
          # Lire les résultats des tests
          AUTH_RESULT=$(cat test_results/auth_result.txt)
          ADVICE_RESULT=$(cat test_results/advice_result.txt)
          PHOTO_RESULT=$(cat test_results/photo_result.txt)
          REDIS_RESULT=$(cat test_results/redis_result.txt)
          # PLANT_CARE_RESULT supprimé
          
          # Afficher les résultats
          if [ "$AUTH_RESULT" -eq "1" ]; then
            echo "✅ Test Auth: Réussi"
          else
            echo "❌ Test Auth: Échoué"
          fi
          
          if [ "$ADVICE_RESULT" -eq "1" ]; then
            echo "✅ Test Advice: Réussi"
          else
            echo "❌ Test Advice: Échoué"
          fi
          
          if [ "$PHOTO_RESULT" -eq "1" ]; then
            echo "✅ Test Photo: Réussi"
          else
            echo "❌ Test Photo: Échoué"
          fi
          
          if [ "$REDIS_RESULT" -eq "1" ]; then
            echo "✅ Test Redis: Réussi"
          else
            echo "❌ Test Redis: Échoué"
          fi
          
          # Test Plant Care désactivé
          echo "⏸️ Test Plant Care: Désactivé temporairement"
          
          # Calculer le nombre total de tests réussis
          TOTAL_SUCCESS=$((AUTH_RESULT + ADVICE_RESULT + PHOTO_RESULT + REDIS_RESULT))
          echo "Résultat global: $TOTAL_SUCCESS/4 tests réussis"
          
      - name: Arrêt de l'API
        if: ${{ always() }}
        working-directory: ./api
        run: |
          if [ -f api_pid.txt ]; then
            kill $(cat api_pid.txt) || true
          fi 