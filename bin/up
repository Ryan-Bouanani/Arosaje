#!/bin/bash

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour les logs
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Fonction pour v√©rifier si Docker est en cours d'ex√©cution
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        echo "‚ùå Erreur: Docker n'est pas en cours d'ex√©cution."
        echo "‚û°Ô∏è  Veuillez d√©marrer Docker et r√©essayer."
        exit 1
    fi
}

# Fonction pour v√©rifier si docker-compose est install√©
check_docker_compose() {
    if ! command -v docker-compose >/dev/null 2>&1; then
        echo "‚ùå Erreur: docker-compose n'est pas install√©."
        echo "‚û°Ô∏è  Veuillez installer docker-compose et r√©essayer."
        exit 1
    fi
}

# Fonction pour v√©rifier si les images existent
check_images() {
    local missing_images=()
    local images=("arosa-je-api" "arosa-je-web" "arosa-je-mobile")
    
    log_info "V√©rification des images Docker..."
    for image in "${images[@]}"; do
        if ! docker images -q "$image" >/dev/null 2>&1; then
            missing_images+=("$image")
        fi
    done

    if [ ${#missing_images[@]} -ne 0 ]; then
        log_warning "Images manquantes d√©tect√©es"
        for image in "${missing_images[@]}"; do
            log_info "Construction de l'image $image..."
            docker-compose build "$image"
            log_success "Image $image construite avec succ√®s"
        done
    else
        log_success "Toutes les images existent d√©j√†"
    fi
}

# Fonction pour arr√™ter proprement les conteneurs
cleanup() {
    echo -e "\n\nüõë Arr√™t des conteneurs..."
    docker-compose stop
    echo "‚úÖ Tous les conteneurs ont √©t√© arr√™t√©s."
    exit 0
}

# Fonction pour red√©marrer les conteneurs
restart() {
    echo -e "\n\nüîÑ Red√©marrage des conteneurs..."
    docker-compose restart
    echo "‚úÖ Tous les conteneurs ont √©t√© red√©marr√©s!"
    echo "üìä Reprise de l'affichage des logs..."
}

# Fonction pour g√©rer les signaux
handle_signal() {
    case $1 in
        SIGINT|SIGTERM)
            cleanup
            ;;
        SIGQUIT)  # CTRL+R envoie SIGQUIT
            restart
            ;;
    esac
}

# Fonction pour v√©rifier si le dossier de la base de donn√©es existe
check_database_directory() {
    log_info "V√©rification des dossiers n√©cessaires..."
    
    # Cr√©ation des dossiers s'ils n'existent pas
    if [ ! -d "./api/assets/database" ]; then
        mkdir -p ./api/assets/database || {
            log_warning "‚ö†Ô∏è  Impossible de cr√©er le dossier database. Essai avec sudo..."
            sudo mkdir -p ./api/assets/database
        }
    fi
    
    if [ ! -d "./api/assets/img" ]; then
        mkdir -p ./api/assets/img || {
            log_warning "‚ö†Ô∏è  Impossible de cr√©er le dossier img. Essai avec sudo..."
            sudo mkdir -p ./api/assets/img
        }
    fi

    # Modification des permissions
    if ! chmod -R 777 ./api/assets 2>/dev/null; then
        log_warning "‚ö†Ô∏è  Impossible de modifier les permissions. Essai avec sudo..."
        sudo chmod -R 777 ./api/assets
    fi
    
    # Cr√©ation de la base de donn√©es si elle n'existe pas
    if [ ! -f "./api/assets/database/arosaje.db" ]; then
        log_warning "Cr√©ation de la base de donn√©es..."
        touch ./api/assets/database/arosaje.db || sudo touch ./api/assets/database/arosaje.db
        chmod 666 ./api/assets/database/arosaje.db || sudo chmod 666 ./api/assets/database/arosaje.db
        log_success "Base de donn√©es cr√©√©e"
    fi

    log_success "Configuration des dossiers termin√©e"
}

case "$1" in
    "all")
        log_info "V√©rification de l'environnement..."
        
        check_docker
        check_docker_compose
        check_database_directory
        check_images
        
        log_info "D√©marrage de tous les conteneurs..."
        
        # Capture des signaux (CTRL+C et CTRL+R)
        trap 'handle_signal SIGINT' SIGINT
        trap 'handle_signal SIGTERM' SIGTERM
        trap 'handle_signal SIGQUIT' SIGQUIT
        
        log_info "D√©marrage des services..."
        if ! docker-compose up -d; then
            echo "‚ùå Erreur lors du d√©marrage des conteneurs."
            echo "üìã Logs de l'erreur:"
            docker-compose logs
            exit 1
        fi

        log_success "Conteneurs d√©marr√©s avec succ√®s!"
        log_info "Affichage des logs..."
        echo "‚ÑπÔ∏è  Utilisez CTRL+C pour arr√™ter ou CTRL+R pour red√©marrer la stack"
        
        # Afficher les logs une seule fois
        docker-compose logs -f
        ;;
    *)
        echo "Usage: bin/up all"
        exit 1
        ;;
esac 