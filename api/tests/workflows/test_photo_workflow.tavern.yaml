test_name: Test gestion des photos
marks:
  - usefixtures:
      - api_url
      - test_user_email
      - test_password
      - test_image_path
      - invalid_file_path
      - admin_email
      - admin_password

stages:
  # Étape 1: Inscription et connexion (prérequis)
  - name: Test inscription utilisateur
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        nom: "Test"
        prenom: "User"
        email: "{test_user_email}"
        password: "{test_password}"
        telephone: "0612345678"
        localisation: "Paris"
    response:
      status_code: 200
      save:
        json:
          user_id: id

  # Étape 1.1: Login administrateur
  - name: Login administrateur
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "{admin_email}"
        password: "{admin_password}"
    response:
      status_code: 200
      save:
        json:
          admin_token: access_token

  # Étape 1.2: Validation du compte utilisateur par l'administrateur
  - name: Validation du compte
    request:
      url: "{api_url}/admin/verify/{user_id}"
      method: POST
      headers:
        Authorization: "Bearer {admin_token}"
    response:
      status_code: 200
      json:
        message: "Compte vérifié avec succès"

  - name: Test login
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          auth_token: access_token

  # Étape 2: Création d'une plante (prérequis)
  - name: Créer une plante
    request:
      url: "{api_url}/plants/"
      method: POST
      headers:
        Authorization: "Bearer {auth_token}"
        content-type: application/x-www-form-urlencoded
      data:
        nom: "Ficus"
        espece: "Ficus benjamina"
        description: "Plante test pour photos"
    response:
      status_code: 200
      save:
        json:
          plant_id: id

  # Étape 3: Upload d'une photo
  - name: Upload photo plante
    request:
      url: "{api_url}/photos/upload/{plant_id}"
      method: POST
      headers:
        Authorization: "Bearer {auth_token}"
      files:
        file: "{test_image_path}"
      params:
        type: "plant"
        description: "Photo principale de la plante"
    response:
      status_code: 200
      verify_response_with:
        function: validators.photo_validators:validate_photo_response
      save:
        json:
          photo_id: id
          photo_url: url
      json:
        plant_id: !int "{plant_id}"
        type: "plant"
        description: "Photo principale de la plante"
        filename: !anything
        url: !anything
        id: !anyint
        created_at: !anything

  # Étape 4: Récupération des photos
  - name: Liste des photos de la plante
    request:
      url: "{api_url}/photos/plant/{plant_id}"
      method: GET
    response:
      status_code: 200
      json:
        photos:
          - id: !int "{photo_id}"
            filename: !anything
            url: "{photo_url}"
            plant_id: !int "{plant_id}"
            type: "plant"
            description: "Photo principale de la plante"
            created_at: !anything

  # Étape 5: Suppression de la photo
  - name: Suppression photo
    request:
      url: "{api_url}/photos/{photo_id}"
      method: DELETE
      headers:
        Authorization: "Bearer {auth_token}"
    response:
      status_code: 200
      json:
        message: "Photo supprimée avec succès"
    delay_after: 0.5  # Attendre 500ms après la suppression

  # Étape 6: Vérification de la suppression
  - name: Vérification suppression
    request:
      url: "{api_url}/photos/plant/{plant_id}"
      method: GET
      headers:
        Authorization: "Bearer {auth_token}"
    response:
      status_code: 200
      json:
        photos: []

  # Tests d'erreur
  - name: Test upload format invalide
    request:
      url: "{api_url}/photos/upload/{plant_id}"
      method: POST
      headers:
        Authorization: "Bearer {auth_token}"
      files:
        file: "{invalid_file_path}"
      params:
        type: "plant"
    response:
      status_code: 400
      json:
        detail: "400: Format de fichier non supporté. Utilisez JPG, JPEG, PNG ou GIF"

  - name: Test suppression photo inexistante
    request:
      url: "{api_url}/photos/99999"
      method: DELETE
      headers:
        Authorization: "Bearer {auth_token}"
    response:
      status_code: 404
      json:
        detail: "Photo non trouvée" 