"""add photo_original field to plants

Revision ID: d4794802ded3
Revises:
Create Date: 2025-09-03 23:02:10.282996

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d4794802ded3"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("conversations")
    op.drop_table("botanist_report_advices")
    op.drop_table("photos")
    op.drop_table("advices")
    op.drop_table("user_presence")
    op.drop_table("conversation_participants")
    op.drop_table("plant_cares")
    op.drop_table("plants")
    op.drop_table("user_typing_status")
    op.drop_table("messages")
    op.drop_table("care_reports")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('users_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("password", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("nom", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("prenom", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("telephone", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("localisation", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "role",
            postgresql.ENUM("USER", "BOTANIST", "ADMIN", name="userrole"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("is_verified", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("email", name="users_email_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "care_reports",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('care_reports_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("plant_care_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("caretaker_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "session_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("photo_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "health_level",
            postgresql.ENUM("BAS", "MOYEN", "BON", name="healthlevel"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "hydration_level",
            postgresql.ENUM("BAS", "MOYEN", "BON", name="healthlevel"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "vitality_level",
            postgresql.ENUM("BAS", "MOYEN", "BON", name="healthlevel"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["caretaker_id"],
            ["users.id"],
            name="care_reports_caretaker_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["plant_care_id"],
            ["plant_cares.id"],
            name="care_reports_plant_care_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="care_reports_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "messages",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "content", sa.VARCHAR(length=2000), autoincrement=False, nullable=False
        ),
        sa.Column("sender_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("conversation_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("is_read", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name="messages_conversation_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["users.id"],
            name="messages_sender_id_fkey",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="messages_pkey"),
    )
    op.create_table(
        "user_typing_status",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("conversation_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_typing", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "last_typed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name="user_typing_status_conversation_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="user_typing_status_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="user_typing_status_pkey"),
    )
    op.create_table(
        "plants",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('plants_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nom", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("espece", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("photo", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name="plants_owner_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="plants_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "plant_cares",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('plant_cares_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("plant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("caretaker_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("conversation_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "start_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "end_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING",
                "ACCEPTED",
                "REFUSED",
                "IN_PROGRESS",
                "COMPLETED",
                "CANCELLED",
                name="carestatus",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "care_instructions", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("start_photo_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("end_photo_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("localisation", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "latitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "longitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["caretaker_id"],
            ["users.id"],
            name="plant_cares_caretaker_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name="plant_cares_conversation_id_fkey",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["users.id"],
            name="plant_cares_owner_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name="plant_cares_plant_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="plant_cares_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "conversation_participants",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("conversation_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "last_read_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name="conversation_participants_conversation_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="conversation_participants_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="conversation_participants_pkey"),
        sa.UniqueConstraint(
            "conversation_id", "user_id", name="unique_conversation_participant"
        ),
    )
    op.create_table(
        "user_presence",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("ONLINE", "OFFLINE", "AWAY", name="userstatus"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "last_seen_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("socket_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="user_presence_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="user_presence_pkey"),
        sa.UniqueConstraint("user_id", name="user_presence_user_id_key"),
    )
    op.create_table(
        "advices",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("plant_care_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("botanist_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "priority",
            postgresql.ENUM("NORMAL", "URGENT", "FOLLOW_UP", name="advicepriority"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "validation_status",
            postgresql.ENUM(
                "PENDING",
                "VALIDATED",
                "REJECTED",
                "NEEDS_REVISION",
                name="validationstatus",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("validator_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("validation_comment", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "validated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("version", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "is_current_version", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "previous_version_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("owner_notified", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "botanist_notified", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["botanist_id"],
            ["users.id"],
            name="advices_botanist_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["plant_care_id"],
            ["plant_cares.id"],
            name="advices_plant_care_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["previous_version_id"],
            ["advices.id"],
            name="advices_previous_version_id_fkey",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["validator_id"],
            ["users.id"],
            name="advices_validator_id_fkey",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="advices_pkey"),
    )
    op.create_table(
        "photos",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("filename", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("url", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("plant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["plant_id"], ["plants.id"], name="photos_plant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="photos_pkey"),
    )
    op.create_table(
        "botanist_report_advices",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("care_report_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("botanist_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("advice_text", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["botanist_id"],
            ["users.id"],
            name="botanist_report_advices_botanist_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["care_report_id"],
            ["care_reports.id"],
            name="botanist_report_advices_care_report_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="botanist_report_advices_pkey"),
    )
    op.create_table(
        "conversations",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "type",
            postgresql.ENUM("PLANT_CARE", "BOTANICAL_ADVICE", name="conversationtype"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("related_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="conversations_pkey"),
    )
    # ### end Alembic commands ###
