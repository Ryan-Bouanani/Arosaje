services:
  api:
    container_name: arosa-je-api
    image: arosa-je-api
    build:
      context: ./api
      dockerfile: Dockerfile
    volumes:
      - ./api:/app
      - ./api/assets/database:/app/assets/database
      - ./api/assets/img:/app/assets/img
    ports:
      - "8000:8000"
    env_file:
      - ./env/.env.api
    environment:
      - DATABASE_URL=sqlite:///assets/database/arosaje.db
      - PYTHONUNBUFFERED=1
    networks:
      - arosa-je-network
    depends_on:
      api-redis:
        condition: service_healthy
    restart: "no"

  web:
    container_name: arosa-je-web
    image: arosa-je-web
    build:
      context: ./web
      dockerfile: Dockerfile
    volumes:
      - ./web:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - ./env/.env.web
    environment:
      - NODE_ENV=development
    networks:
      - arosa-je-network
    depends_on:
      - api
    restart: "no"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: >
      sh -c '
        cleanup() {
          echo "Cleaning up..."
          pkill -f "node" || true
          rm -rf /tmp/nitro/worker-*.sock || true
          exit 0
        }
        trap cleanup SIGTERM SIGINT
        rm -rf .nuxt /tmp/nitro/worker-*.sock
        npm run dev & wait
      '

  mobile:
    container_name: arosa-je-mobile
    image: arosa-je-mobile
    build:
      context: ./mobile
      dockerfile: Dockerfile
    volumes:
      - ./mobile:/app
      - /app/node_modules
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
    networks:
      - arosa-je-network
    restart: "no"

  api-redis:
    image: redis:7-alpine
    container_name: arosa-je-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/users.acl:/data/users.acl:ro
    networks:
      - arosa-je-network
    env_file:
      - ./env/.env.api
    command: >
      sh -c '
        redis-server --appendonly yes --requirepass "$${REDIS_PASSWORD}" --aclfile /data/users.acl'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

networks:
  arosa-je-network:
    name: arosa-je-network

volumes:
  redis_data:
