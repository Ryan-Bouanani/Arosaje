from utils.database import Base, engine
from models import user, plant, advice, garde, photo
import os
from pathlib import Path
from utils.settings import DATABASE_URL
import sqlite3

def check_sqlite_db():
    """V√©rifie si la base de donn√©es SQLite est valide"""
    try:
        # Extraire le chemin du fichier de l'URL SQLite
        db_path = DATABASE_URL.replace("sqlite:///", "")
        if os.path.exists(db_path):
            # Tester la connexion √† la base de donn√©es
            conn = sqlite3.connect(db_path)
            conn.close()
            return True
    except sqlite3.Error:
        return False
    return False

def init_db():
    # V√©rifier si l'URL est bien pour SQLite
    if not DATABASE_URL.startswith("sqlite:///"):
        print("‚ùå Erreur: La configuration attend une base de donn√©es SQLite")
        return False

    # Cr√©er le dossier database s'il n'existe pas
    db_path = Path("assets/database")
    db_path.mkdir(parents=True, exist_ok=True)
    
    # V√©rifier si la base de donn√©es existe d√©j√† et est valide
    if check_sqlite_db():
        print("‚ÑπÔ∏è La base de donn√©es existe d√©j√† et semble valide")
        return True
    
    try:
        print("üîß Cr√©ation des tables dans la base de donn√©es...")
        Base.metadata.create_all(bind=engine)
        
        # V√©rifier que la base de donn√©es a √©t√© cr√©√©e correctement
        if check_sqlite_db():
            print("‚úÖ Base de donn√©es initialis√©e avec succ√®s!")
            return True
        else:
            print("‚ùå Erreur: La base de donn√©es n'a pas pu √™tre cr√©√©e correctement")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {str(e)}")
        return False

if __name__ == "__main__":
    init_db() 