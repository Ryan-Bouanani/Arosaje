test_name: Test du workflow complet d'une garde de plante

marks:
  - usefixtures:
      - api_url
      - test_password
      - test_image_path
      - test_user_email
      - admin_email
      - admin_password

stages:
  # 1. Création du propriétaire
  - name: Créer un compte propriétaire
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        email: "owner_{test_user_email}"
        password: "{test_password}"
        nom: "Dupont"
        prenom: "Jean"
        telephone: "0123456789"
        localisation: "Paris"
    response:
      status_code: 200
      save:
        json:
          owner_id: id

  # 2. Création du gardien
  - name: Créer un compte gardien
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        email: "caretaker_{test_user_email}"
        password: "{test_password}"
        nom: "Martin"
        prenom: "Sophie"
        telephone: "0987654321"
        localisation: "Lyon"
    response:
      status_code: 200
      save:
        json:
          caretaker_id: id

  # 2.1. Login administrateur
  - name: Login administrateur
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "{admin_email}"
        password: "{admin_password}"
    response:
      status_code: 200
      save:
        json:
          admin_token: access_token

  # 2.2. Validation du compte propriétaire
  - name: Valider le compte propriétaire
    request:
      url: "{api_url}/admin/verify/{owner_id}"
      method: POST
      headers:
        Authorization: "Bearer {admin_token}"
    response:
      status_code: 200
      json:
        message: "Compte vérifié avec succès"

  # 2.3. Validation du compte gardien
  - name: Valider le compte gardien
    request:
      url: "{api_url}/admin/verify/{caretaker_id}"
      method: POST
      headers:
        Authorization: "Bearer {admin_token}"
    response:
      status_code: 200
      json:
        message: "Compte vérifié avec succès"

  # 3. Login du propriétaire
  - name: Login propriétaire
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "owner_{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          owner_token: access_token

  # 4. Création d'une plante
  - name: Créer une plante
    request:
      url: "{api_url}/plants/"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
        content-type: application/x-www-form-urlencoded
      data:
        nom: "Ficus"
        espece: "Ficus benjamina"
        description: "Belle plante d'intérieur"
    response:
      status_code: 200
      save:
        json:
          plant_id: id

  # 5. Création d'une demande de garde
  - name: Créer une demande de garde
    request:
      url: "{api_url}/plant-care/"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
      json:
        plant_id: !int "{plant_id}"
        caretaker_id: !int "{caretaker_id}"
        start_date: "2024-03-01T00:00:00"
        end_date: "2024-03-15T00:00:00"
        care_instructions: "Arroser deux fois par semaine"
    response:
      status_code: 200
      save:
        json:
          care_id: id
      verify_response_with:
        function: validators.care_validators:validate_care_response
        extra_kwargs:
          expected_status: "pending"

  # 6. Login du gardien
  - name: Login gardien
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "caretaker_{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          caretaker_token: access_token

  # 7. Acceptation de la garde
  - name: Accepter la garde
    request:
      url: "{api_url}/plant-care/{care_id}/accept"
      method: PUT
      headers:
        Authorization: "Bearer {caretaker_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.care_validators:validate_care_response
        extra_kwargs:
          expected_status: "accepted"

  # 8. Démarrage de la garde
  - name: Démarrer la garde
    request:
      url: "{api_url}/plant-care/{care_id}/start"
      method: PUT
      headers:
        Authorization: "Bearer {caretaker_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.care_validators:validate_care_response
        extra_kwargs:
          expected_status: "in_progress"

  # 9. Finalisation de la garde
  - name: Finaliser la garde
    request:
      url: "{api_url}/plant-care/{care_id}/complete"
      method: PUT
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.care_validators:validate_care_response
        extra_kwargs:
          expected_status: "completed"

  # 10. Vérification finale
  - name: Vérifier l'état final de la garde
    request:
      url: "{api_url}/plant-care/{care_id}"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.care_validators:validate_care_response
        extra_kwargs:
          expected_status: "completed"
          check_start_photo: true
          check_end_photo: true 