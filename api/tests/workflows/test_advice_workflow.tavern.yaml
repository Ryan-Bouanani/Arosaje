test_name: Test du workflow complet des conseils botaniques

marks:
  - usefixtures:
      - api_url
      - test_password
      - test_user_email
      - admin_email
      - admin_password

stages:
  # 1. Création d'un botaniste
  - name: Créer un compte botaniste
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        email: "botanist_{test_user_email}"
        password: "{test_password}"
        nom: "Dubois"
        prenom: "Pierre"
        telephone: "0123456789"
        localisation: "Paris"
    response:
      status_code: 200
      save:
        json:
          botanist_id: id

  # 1.1 Login administrateur
  - name: Login administrateur
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "{admin_email}"
        password: "{admin_password}"
    response:
      status_code: 200
      save:
        json:
          admin_token: access_token

  # 1.2 Validation du compte botaniste
  - name: Valider le compte botaniste
    request:
      url: "{api_url}/admin/verify/{botanist_id}"
      method: POST
      headers:
        Authorization: "Bearer {admin_token}"
    response:
      status_code: 200
      json:
        message: "Compte vérifié avec succès"

  # 2. Création d'un propriétaire de plante
  - name: Créer un compte propriétaire
    request:
      url: "{api_url}/auth/register"
      method: POST
      json:
        email: "owner_{test_user_email}"
        password: "{test_password}"
        nom: "Martin"
        prenom: "Julie"
        telephone: "0987654321"
        localisation: "Lyon"
    response:
      status_code: 200
      save:
        json:
          owner_id: id

  # 2.1 Validation du compte propriétaire
  - name: Valider le compte propriétaire
    request:
      url: "{api_url}/admin/verify/{owner_id}"
      method: POST
      headers:
        Authorization: "Bearer {admin_token}"
    response:
      status_code: 200
      json:
        message: "Compte vérifié avec succès"

  # 3. Login du propriétaire
  - name: Login propriétaire
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "owner_{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          owner_token: access_token

  # 4. Création d'une plante
  - name: Créer une plante
    request:
      url: "{api_url}/plants/"
      method: POST
      headers:
        Authorization: "Bearer {owner_token}"
        content-type: application/x-www-form-urlencoded
      data:
        nom: "Orchidée"
        espece: "Phalaenopsis"
        description: "Orchidée d'intérieur"
    response:
      status_code: 200
      save:
        json:
          plant_id: id

  # 5. Login du botaniste
  - name: Login botaniste
    request:
      url: "{api_url}/auth/login"
      method: POST
      headers:
        content-type: application/x-www-form-urlencoded
      data:
        username: "botanist_{test_user_email}"
        password: "{test_password}"
    response:
      status_code: 200
      save:
        json:
          botanist_token: access_token

  # 6. Définir le rôle botaniste
  - name: Mettre à jour le rôle en botaniste
    request:
      url: "{api_url}/auth/users/{botanist_id}/role"
      method: PUT
      headers:
        Authorization: "Bearer {botanist_token}"
      json:
        role: "botanist"
    response:
      status_code: 200

  # 7. Création d'un conseil (automatiquement validé pour les botanistes)
  - name: Créer un conseil
    request:
      url: "{api_url}/advices/"
      method: POST
      headers:
        Authorization: "Bearer {botanist_token}"
      json:
        texte: "Arroser une fois par semaine avec de l'eau tempérée"
        plant_id: !int "{plant_id}"
    response:
      status_code: 200
      save:
        json:
          advice_id: id
      verify_response_with:
        function: validators.advice_validators:validate_advice_response
        extra_kwargs:
          expected_status: "validated"

  # 8. Vérification finale
  - name: Vérifier l'état final du conseil
    request:
      url: "{api_url}/advices/{advice_id}"
      method: GET
      headers:
        Authorization: "Bearer {owner_token}"
    response:
      status_code: 200
      verify_response_with:
        function: validators.advice_validators:validate_advice_response
        extra_kwargs:
          expected_status: "validated" 