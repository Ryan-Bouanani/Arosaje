#!/bin/bash

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour les logs
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Fonction pour v√©rifier si Docker est en cours d'ex√©cution
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        echo "‚ùå Erreur: Docker n'est pas en cours d'ex√©cution."
        echo "‚û°Ô∏è  Veuillez d√©marrer Docker et r√©essayer."
        exit 1
    fi
}

# Fonction pour v√©rifier si docker-compose est install√©
check_docker_compose() {
    if ! command -v docker-compose >/dev/null 2>&1; then
        echo "‚ùå Erreur: docker-compose n'est pas install√©."
        echo "‚û°Ô∏è  Veuillez installer docker-compose et r√©essayer."
        exit 1
    fi
}

# Fonction pour v√©rifier si une image existe
check_image() {
    local service="$1"
    local image="arosa-je-$service"
    
    log_info "V√©rification de l'image Docker pour le service '$service'..."
    if ! docker images --format "{{.Repository}}" | grep -q "^${image}$"; then
        log_warning "üîç Image '$image' non trouv√©e"
        log_info "üèóÔ∏è  Construction de l'image..."
        if docker-compose build "$service"; then
            log_success "‚ú® Image construite avec succ√®s"
        else
            echo "‚ùå Erreur lors de la construction de l'image"
            exit 1
        fi
    else
        log_success "üì¶ Image '$image' trouv√©e"
    fi
}

# Fonction pour v√©rifier si le dossier de la base de donn√©es existe (uniquement pour l'API)
check_database_directory() {
    log_info "V√©rification des dossiers n√©cessaires..."
    
    # Cr√©ation des dossiers s'ils n'existent pas
    if [ ! -d "./api/assets/database" ]; then
        mkdir -p ./api/assets/database || {
            log_warning "‚ö†Ô∏è  Impossible de cr√©er le dossier database. Essai avec sudo..."
            sudo mkdir -p ./api/assets/database
        }
    fi
    
    if [ ! -d "./api/assets/img" ]; then
        mkdir -p ./api/assets/img || {
            log_warning "‚ö†Ô∏è  Impossible de cr√©er le dossier img. Essai avec sudo..."
            sudo mkdir -p ./api/assets/img
        }
    fi
    
    # Cr√©ation de la base de donn√©es si elle n'existe pas
    if [ ! -f "./api/assets/database/arosaje.db" ]; then
        log_warning "Cr√©ation de la base de donn√©es..."
        touch ./api/assets/database/arosaje.db || sudo touch ./api/assets/database/arosaje.db
        chmod 666 ./api/assets/database/arosaje.db || sudo chmod 666 ./api/assets/database/arosaje.db
        log_success "Base de donn√©es cr√©√©e"
    fi

    log_success "Configuration des dossiers termin√©e"
}

# Fonction pour arr√™ter proprement les conteneurs
cleanup() {
    echo -e "\n\nüõë Arr√™t des conteneurs..."
    
    # Arr√™ter les conteneurs sp√©cifi√©s ou tous les conteneurs
    if [ "$1" = "all" ]; then
        docker-compose down --remove-orphans
        echo "‚úÖ Tous les services ont √©t√© arr√™t√©s."
    else
        # Convertir les arguments en array pour g√©rer plusieurs services
        local services=($@)
        if [ ${#services[@]} -gt 0 ]; then
            docker-compose rm -fsv "${services[@]}"
            echo "‚úÖ Services arr√™t√©s : ${services[*]}"
        else
            docker-compose down --remove-orphans
            echo "‚úÖ Tous les services ont √©t√© arr√™t√©s."
        fi
    fi
    exit 0
}

# Fonction pour d√©marrer des services sp√©cifiques
start_services() {
    log_info "V√©rification de l'environnement..."
    check_docker
    check_docker_compose
    
    local services=("$@")
    local valid_services=1
    
    # V√©rifier que tous les services sont valides
    for service in "${services[@]}"; do
        case "$service" in
            "api"|"web"|"mobile")
                continue
                ;;
            *)
                echo "‚ùå Service invalide: $service"
                valid_services=0
                ;;
        esac
    done
    
    if [ $valid_services -eq 0 ]; then
        show_help
        exit 1
    fi
    
    # Configuration sp√©cifique pour l'API si n√©cessaire
    if [[ " ${services[@]} " =~ " api " ]]; then
        check_database_directory
    fi
    
    # V√©rifier et construire les images
    for service in "${services[@]}"; do
        check_image "$service"
    done
    
    # Capture du signal SIGINT
    trap "cleanup ${services[*]}" SIGINT SIGTERM
    
    log_info "D√©marrage des services: ${services[*]}..."
    if ! docker-compose up -d "${services[@]}"; then
        echo "‚ùå Erreur lors du d√©marrage des services."
        echo "üìã Logs de l'erreur:"
        docker-compose logs "${services[@]}"
        exit 1
    fi

    log_success "Services d√©marr√©s avec succ√®s!"
    log_info "Affichage des logs..."
    echo "‚ÑπÔ∏è  Utilisez CTRL+C pour arr√™ter"
    
    docker-compose logs -f "${services[@]}"
}

# Afficher l'aide
show_help() {
    echo "Usage: bin/up [services...]"
    echo ""
    echo "Options disponibles:"
    echo "  all               - D√©marre tous les services"
    echo "  api web mobile    - D√©marre les services sp√©cifi√©s (dans n'importe quel ordre)"
    echo ""
    echo "Exemples:"
    echo "  bin/up api web    - D√©marre l'API et le frontend web"
    echo "  bin/up api mobile - D√©marre l'API et l'application mobile"
    echo "  bin/up web       - D√©marre uniquement le frontend web"
    echo ""
    exit 1
}

case "$1" in
    "all")
        log_info "V√©rification de l'environnement..."
        check_docker
        check_docker_compose
        check_database_directory
        check_image "api"
        check_image "web"
        check_image "mobile"
        
        # Capture du signal SIGINT pour tous les services
        trap "cleanup all" SIGINT SIGTERM
        
        log_info "D√©marrage de tous les services..."
        if ! docker-compose up -d; then
            echo "‚ùå Erreur lors du d√©marrage des conteneurs."
            echo "üìã Logs de l'erreur:"
            docker-compose logs
            exit 1
        fi

        log_success "Tous les services d√©marr√©s avec succ√®s!"
        log_info "Affichage des logs..."
        echo "‚ÑπÔ∏è  Utilisez CTRL+C pour arr√™ter"
        
        docker-compose logs -f
        ;;
    "")
        show_help
        ;;
    *)
        start_services "$@"
        ;;
esac 